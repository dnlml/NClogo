doctype html
html(lang="en" class="no-js")
  head
    meta(charset="utf-8")
    meta(http-equiv="x-ua-compatible" content="ie=edge")
    meta(name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    title Title
    script.
      document.documentElement.classList.remove("no-js")
      document.documentElement.classList.add("js")
  body
    include includes/vars.pug
    include includes/mixins.pug

    div#logo

    script(id="vertexShader" type="x-shader/x-vertex").
      void main() {
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    script(id="fragmentShader" type="x-shader/x-fragment").
      #ifdef GL_ES
      precision mediump float;
      #endif

      uniform vec2 u_resolution;
      uniform vec2 u_mouse;
      uniform float u_time;

      float random (in vec2 _st) {
          return fract(sin(dot(_st.xy,
                              vec2(12.9898,78.233)))*
              43758.5453123);
      }

      float noise (in vec2 _st) {
          vec2 i = floor(_st);
          vec2 f = fract(_st);

          // Four corners in 2D of a tile
          float a = random(i);
          float b = random(i + vec2(1.0, 0.0));
          float c = random(i + vec2(0.0, 1.0));
          float d = random(i + vec2(1.0, 1.0));

          vec2 u = f * f * (3.0 - 2.0 * f);

          return mix(a, b, u.x) +
                  (c - a)* u.y * (1.0 - u.x) +
                  (d - b) * u.x * u.y;
      }

      #define NUM_OCTAVES 5

      float fbm ( in vec2 _st) {
          float v = 0.0;
          float a = 0.5;
          vec2 shift = vec2(100.0);
          // Rotate to reduce axial bias
          mat2 rot = mat2(cos(0.5), sin(0.5),
                          -sin(0.5), cos(0.50));
          for (int i = 0; i < NUM_OCTAVES; ++i) {
              v += a * noise(_st);
              _st = rot * _st * 2.0 + shift;
              a *= 0.5;
          }
          return v;
      }

      void main() {
          vec2 st = gl_FragCoord.xy/u_resolution.xy*3.;
          vec3 color = vec3(0.404,0.227,0.717);

          vec2 q = vec2(0.);
          q.x = fbm( st );
          q.y = fbm( st + vec2(2.0));

          vec2 r = vec2(0.);
          r.x = fbm( st + 1.5*q + vec2(1.7,9.2)+ 0.15*u_time + u_mouse.x);
          r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ 0.126*u_time + u_mouse.y);

          float f = fbm(st+r);

          color = mix(vec3(0.404,0.227,0.717),
                      vec3(0.404,0.227,0.717),
                      clamp((f*f)*4.0,0.0,1.0));

          color = mix(color,
                      vec3(0.404,0.227,0.717),
                      clamp(length(q),0.0,1.0));

          color = mix(color,
                      vec3(0.404,0.227,0.717),
                      clamp(length(r.x),0.0,1.0));

          gl_FragColor = vec4((f+.9*f+.5*f)*color,1.);
      }